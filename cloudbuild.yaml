steps:
  # Step 0: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', '.']

   - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ls
        cat /etc/os-release
        apt-get update
        apt-get install net-tools
        apt-get install -y wget
        apt-get install -y curl
        apt-get -y install lsof
        apt-get  -y install telnet
        apt-get install iproute2 -y
        apt-get install ca-certificates curl gnupg -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update
        apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
        docker run hello-world
        docker pull arminc/clair-local-scan
        docker pull arminc/clair-db
        docker images
        docker run -d --name clair-db arminc/clair-db:latest
        docker run -p 6060:6060 --link clair-db:postgres -d --name clair arminc/clair-local-scan:latest

        echo "docker ps"
        docker ps
        sleep 20
        echo "docker ps -a "
        docker ps -a 
        echo "docker logs clair"
        docker logs clair
        curl -L https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 -o /usr/bin/clair-scanner
        chmod 777 /usr/bin/clair-scanner
        clair-scanner -h
        
        echo "telnet 127.0.0.1 6060"
        telnet 127.0.0.1 6060

        echo "telnet 192.168.10.2 6060"
        telnet 192.168.10.2 6060
        
        echo "lsof -i tcp:6060"
        lsof -i tcp:6060
        
        ls
        docker images
        
        ip addr show
        ifconfig
        _HOST_IP=$(ifconfig eth0 | awk -F ' *|:' '/inet addr/{print $4}')
        echo $_HOST_IP
        clair-scanner -c http://127.0.0.1:6060 --ip "127.0.0.1" --report="report.json" -t "High" us-central1-docker.pkg.dev/mcmp-integration-qa/clair-sca

  # - name: 'gcr.io/cloud-builders/docker'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       git clone https://github.com/quay/clair.git
  #       cd clair
  #       docker-compose pull
  #       docker-compose up -d
        
  # - name: 'gcr.io/cloud-builders/docker'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       apt-get install -y wget
  #       apt-get install -y curl
        
  #       # Install Klar
  #       wget https://github.com/optiopay/klar/releases/download/v2.4.0/klar-ubuntu
  #       chmod +x klar-ubuntu
  #       mv klar-ubuntu /usr/local/bin/klar

  #       # Scan Docker image using Klar
  #       IMAGE_NAME=gcr.io/$PROJECT_ID/my-app:$COMMIT_SHA
  #       klar -c https://<CLAIR_HOST>:<CLAIR_PORT> -i $IMAGE_NAME

  #       # Get Klar exit code
  #       KLAR_EXIT_CODE=$?

  #       # Fail if critical vulnerabilities found
  #       if [[ $KLAR_EXIT_CODE -eq 0 ]]; then
  #         echo "No vulnerabilities found."
  #       else
  #         echo "Critical vulnerabilities found. Exiting..."
  #         exit 1
        # fi
        
        
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest-scanned']

  # Step 7: Store the scan report in a GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', 'clair-scan-report.json', 'gs://clair-scan-report-bucket/clair-scan-report.json']

