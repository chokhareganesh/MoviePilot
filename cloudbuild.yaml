steps:
  # Step 0: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', '.']

  # Step 1: Install and run Clair to scan the Docker image

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        docker pull arminc/clair-db:latest
        docker create --name clair-db arminc/clair-db:latest
        docker pull arminc/clair-local-scan:latest
        docker create --name clair-scanner --link clair-db:postgres -p 6060:6060 arminc/clair-local-scan:latest
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y wget
        apt-get update && apt-get install -y curl
        apt install sudo
        apt install net-tools
        apt install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt update
        apt install -y docker-ce docker-ce-cli containerd.io
        systemctl start docker
        systemctl enable docker
        docker --version
        docker pull arminc/clair-local-scan
        docker pull arminc/clair-db
        docker images
        docker run -d --name clair-db arminc/clair-db:latest
        docker run -p 6060:6060 --link clair-db:postgres -d --name clair arminc/clair-local-scan:latest
        docker pull us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:${COMMIT_SHA}
        curl -L https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 -o /usr/bin/clair-scanner
        chmod 777 /usr/bin/clair-scanner
        clair-scanner -h  
        clair-scanner -c http://localhost:6060 --report="report.json" -t "High" us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest
  
  # Step 4: Check the scan results for critical vulnerabilities
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['container', 'images', 'describe', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest']

  # Step 5: Fail the build if critical vulnerabilities are found
  - name: 'gcr.io/cloud-builders/bash'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if grep -q "CRITICAL" clair-scan-report.json; then
          echo "Critical vulnerabilities found. Please remediate before deploying.";
          exit 1;
        else
          echo "No critical vulnerabilities found. Proceed with the deployment.";
          exit 0;
        fi

  # Step 6: Push the scanned image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest-scanned']
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest-scanned']

  # Step 7: Store the scan report in a GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', 'clair-scan-report.json', 'gs://clair-scan-report-bucket/clair-scan-report.json']

