steps:
  # Step 0: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', '.']

  # Step 1: Install and run Clair to scan the Docker image

  # - name: 'gcr.io/cloud-builders/docker'
  #   entrypoint: 'sh'
  #   args:
  #     - '-c'
  #     - |
  #       docker pull arminc/clair-db:latest
  #       docker create --name clair-db arminc/clair-db:latest
  #       docker pull arminc/clair-local-scan:latest
  #       docker create --name clair-scanner --link clair-db:postgres -p 6060:6060 arminc/clair-local-scan:latest
  # - name: 'ubuntu'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       apt-get update && apt-get install -y wget
  #       apt-get update && apt-get install -y curl
  #       apt install net-tools
  #       curl -L https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64 -o /usr/bin/clair-scanner
  #       chmod 777 /usr/bin/clair-scanner
  #       clair-scanner -h  
  #       cat /etc/lsb-release
  #       apt-get update
  #       apt-get install -y iproute2
  #       _HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
  #       echo $_HOST_IP
        
  #       clair-scanner -c http://localhost:6060 --ip ${_HOST_IP} --report="report.json" -t "High" us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['run', '--rm', '-v', '/var/run/docker.sock:/var/run/docker.sock', 'quay.io/coreos/clair:v2.1.7', '-c', 'http://clair:6060', '-r', 'report.json','-t','High', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '-d', '-p', '6060:6060', '--name', 'clair', 'quay.io/coreos/clair:v2.1.7']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '--net', 'host', '-v', '/var/run/docker.sock:/var/run/docker.sock', 'arminc/clair-scanner:v12', '-c', 'http://localhost:6060', '-r', 'report.json', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest']

```
  # Step 4: Check the scan results for critical vulnerabilities
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['container', 'images', 'describe', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest']

  # Step 5: Fail the build if critical vulnerabilities are found
  - name: 'gcr.io/cloud-builders/bash'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if grep -q "CRITICAL" clair-scan-report.json; then
          echo "Critical vulnerabilities found. Please remediate before deploying.";
          exit 1;
        else
          echo "No critical vulnerabilities found. Proceed with the deployment.";
          exit 0;
        fi

  # Step 6: Push the scanned image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest-scanned']
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest-scanned']

  # Step 7: Store the scan report in a GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', 'clair-scan-report.json', 'gs://clair-scan-report-bucket/clair-scan-report.json']

