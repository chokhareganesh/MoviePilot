steps:

  # Step 1: Install Clair (Assuming Docker is already installed)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['pull', 'quay.io/coreos/clair:v4.2.0']
    timeout: '120s'
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'quay.io/coreos/clair:v4.2.0', 'clair:v4.2.0']

  # Step 2: Build your Docker image (Replace [DOCKER_IMAGE_NAME] and [TAG] with appropriate values)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest', '.']
    timeout: '1200s'

  # # Step 3: Push the built image to Artifact Registry
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', ']']
  #   timeout: '120s'

  # Step 4: Scan the Docker image using Clair
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '-d', '--name', 'clair', '-p', '6060:6060', 'clair:v4.2.0', '/clair', '-config', '/config/config.yaml']
    id: 'start-clair'

  # Step 5: Wait for Clair to start (You can adjust the waiting time as needed)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '--link', 'clair:clair', 'alpine', 'sh', '-c', 'while ! nc -z clair 6060; do sleep 1; done']

  # Step 6: Scan the Docker image using Clair
  - name: 'gcr.io/cloud-builders/docker'
    args: ['pull', 'quay.io/coreos/clairctl:v1.4.7']
    timeout: '120s'
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '-v', '/workspace:/workspace', '--link', 'clair:clair', 'quay.io/coreos/clairctl:v1.4.7', '-c', 'http://clair:6060', 'analyze', '--report', '/workspace/clair_report.json', 'us-central1-docker.pkg.dev/mcmp-integration-qa/clair-scan-repo/appimage:latest']

  # Step 7: Stop and remove the Clair container
  - name: 'gcr.io/cloud-builders/docker'
    args: ['stop', 'clair']
    id: 'stop-clair'
    waitFor: ['start-clair']

  # # Step 8: Fail the build if there are critical vulnerabilities found
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: ['functions', 'deploy', 'fail-build-if-critical', '--runtime', 'nodejs16', '--trigger-http', '--allow-unauthenticated']

  # # Step 9: Remediation guidance (Example - You can customize this based on the vulnerabilities found)
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: ['functions', 'deploy', 'remediation-guidance', '--runtime', 'nodejs16', '--trigger-http', '--allow-unauthenticated']

  # # Step 10: Push the scanned Docker image to Artifact Registry
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['tag', 'gcr.io/[PROJECT_ID]/[DOCKER_IMAGE_NAME]:[TAG]', 'gcr.io/[PROJECT_ID]/[DOCKER_IMAGE_NAME]:scanned']
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/[PROJECT_ID]/[DOCKER_IMAGE_NAME]:scanned']

  # # Step 11: Save reports to GCS bucket
  # - name: 'gcr.io/cloud-builders/gsutil'
  #   args: ['cp', 'clair_report.json', 'gs://[YOUR_GCS_BUCKET]/clair_report.json']

